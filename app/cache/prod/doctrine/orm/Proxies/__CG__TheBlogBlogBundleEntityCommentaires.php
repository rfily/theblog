<?php

namespace Proxies\__CG__\TheBlog\BlogBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Commentaires extends \TheBlog\BlogBundle\Entity\Commentaires implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'id', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'auteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'contenu', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'emailauteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'siteauteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'date', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'article');
        }

        return array('__isInitialized__', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'id', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'auteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'contenu', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'emailauteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'siteauteur', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'date', '' . "\0" . 'TheBlog\\BlogBundle\\Entity\\Commentaires' . "\0" . 'article');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Commentaires $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuteur($auteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuteur', array($auteur));

        return parent::setAuteur($auteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuteur', array());

        return parent::getAuteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setContenu($contenu)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContenu', array($contenu));

        return parent::setContenu($contenu);
    }

    /**
     * {@inheritDoc}
     */
    public function getContenu()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContenu', array());

        return parent::getContenu();
    }

    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', array($date));

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', array());

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setArticle(\TheBlog\BlogBundle\Entity\Article $article)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArticle', array($article));

        return parent::setArticle($article);
    }

    /**
     * {@inheritDoc}
     */
    public function getArticle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArticle', array());

        return parent::getArticle();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmailauteur($emailauteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmailauteur', array($emailauteur));

        return parent::setEmailauteur($emailauteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmailauteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmailauteur', array());

        return parent::getEmailauteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setSiteauteur($siteauteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSiteauteur', array($siteauteur));

        return parent::setSiteauteur($siteauteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getSiteauteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSiteauteur', array());

        return parent::getSiteauteur();
    }

}
